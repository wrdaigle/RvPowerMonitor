{"version":3,"sources":["context/appContext.js","context/AppProvider.js","components/LatestData.js","components/Chart.js","components/ChartTabs.js","components/TimeSpanSelector.js","components/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["appContext","createContext","initialState","powerData","chartMetric","chartTimeSpan","fetching","serverRoot","window","location","hostname","appReducer","state","action","type","to","parseInt","Error","AppProvider","props","useReducer","dispatch","useEffect","setPowerData","interval","setInterval","clearInterval","fetch","toString","then","response","json","data","Provider","value","setChartMetric","setChartTimeSpan","children","LatestData","isPortrait","useContext","batteryPercentage","latestData","amphours","batteryCapacity","amps","watts","voltage","rows","columns","Grid","fill","pad","Box","align","justify","direction","Text","size","weight","color","Math","round","Stack","anchor","Meter","background","values","PowerCharts","graphData","margin","top","right","left","bottom","stroke","dataKey","scale","domain","allowDataOverflow","tickFormatter","timestamp","moment","format","style","fontSize","width","ticks","strokeWidth","dot","strokeDasharray","Layout","tabs","Tabs","flex","activeIndex","indexOf","onActive","index","alignControls","Tab","title","Chart","TimeSpanSelector","RadioButtonGroup","name","gap","options","disabled","label","onChange","event","target","option","checked","hover","useState","innerHeight","innerWidth","set_isPortrait","handleWindowResize","addEventListener","removeEventListener","chartHeight","console","debug","ChartTabs","customTheme","deepMerge","grommet","global","focus","border","tab","active","side","App","Grommet","full","theme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a969d623.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst appContext = createContext();\r\n\r\nexport default appContext;","import React, { useReducer, useEffect } from \"react\";\r\nimport AppContext from \"./appContext\";\r\n\r\nconst initialState = {\r\n    powerData: null,\r\n    chartMetric: \"watts\",\r\n    chartTimeSpan: 6,\r\n    fetching: false,\r\n};\r\n\r\nconst serverRoot =\r\n    window.location.hostname === \"localhost\" ? \"http://192.168.4.37\" : \"\";\r\n\r\nconst AppProvider = (props) => {\r\n    const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n    useEffect(() => {\r\n        if (!state.powerData) setPowerData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setPowerData();\r\n        const interval = setInterval(() => {\r\n            if (!state.fetching) setPowerData();\r\n        }, 10000);\r\n        return () => clearInterval(interval);\r\n    }, [state.chartTimeSpan]);\r\n\r\n    const setPowerData = () => {\r\n        dispatch({\r\n            type: \"SET_FETCHING\"\r\n        });\r\n        fetch(serverRoot + \"/api/hours/\" + state.chartTimeSpan.toString())\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                dispatch({\r\n                    type: \"SET_POWER_DATA\",\r\n                    to: data,\r\n                });\r\n            });\r\n    };\r\n\r\n    const setChartMetric = (chartMetric) => {\r\n        dispatch({ type: \"SET_CHART_METRIC\", to: chartMetric });\r\n    };\r\n\r\n    const setChartTimeSpan = (chartTimeSpan) => {\r\n        dispatch({ type: \"SET_CHART_TIME_SPAN\", to: chartTimeSpan });\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                powerData: state.powerData,\r\n                setPowerData,\r\n                chartMetric: state.chartMetric,\r\n                setChartMetric,\r\n                chartTimeSpan: state.chartTimeSpan,\r\n                setChartTimeSpan,\r\n                fetching: state.fetching\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nconst appReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                fetching: true,\r\n            };\r\n        case \"SET_POWER_DATA\":\r\n            return {\r\n                ...state,\r\n                powerData: action.to,\r\n                fetching: false,\r\n            };\r\n        case \"SET_CHART_METRIC\":\r\n            return {\r\n                ...state,\r\n                chartMetric: action.to,\r\n            };\r\n        case \"SET_CHART_TIME_SPAN\":\r\n            return {\r\n                ...state,\r\n                chartTimeSpan: parseInt(action.to, 10),\r\n            };\r\n        default:\r\n            throw new Error();\r\n    }\r\n};\r\n\r\nexport default AppProvider;\r\n","import React, { useContext } from \"react\";\r\nimport appContext from \"../context/appContext\";\r\n\r\nimport { Box, Grid, Meter, Stack, Text } from \"grommet\";\r\n\r\nfunction LatestData({ isPortrait }) {\r\n    const { powerData } = useContext(appContext);\r\n    if (!powerData) return null;\r\n\r\n    const batteryPercentage =\r\n        (100 * powerData.latestData.amphours) / powerData.batteryCapacity;\r\n    const amps = powerData.latestData.watts / powerData.latestData.voltage;\r\n    const rows = isPortrait ? [\"1/2\", \"1/2\"] : ['auto'];\r\n    const columns = isPortrait ? [\"1/2\", \"1/2\"] : [\"1/4\", \"1/4\", \"1/4\", \"1/4\"];\r\n\r\n    return (\r\n        <Grid fill columns={columns} rows={rows} pad=\"medium\">\r\n            <Box align=\"center\" justify=\"center\" direction=\"row\">\r\n                <Text size=\"xxlarge\" weight=\"bold\" color=\"accent-1\">\r\n                    {Math.round(powerData.latestData.watts * 10) / 10}\r\n                </Text>\r\n                <Text>&nbsp;watts</Text>\r\n            </Box>\r\n            <Box align=\"center\" justify=\"center\" direction=\"row\">\r\n                <Text size=\"xxlarge\" weight=\"bold\" color=\"accent-1\">\r\n                    {Math.round(amps * 100) / 100}\r\n                </Text>\r\n                <Text>&nbsp;amps</Text>\r\n            </Box>\r\n            <Box align=\"center\" justify=\"center\" direction=\"row\">\r\n                <Text size=\"xxlarge\" weight=\"bold\" color=\"accent-1\">\r\n                    {Math.round(powerData.latestData.voltage * 10) / 10}\r\n                </Text>\r\n                <Text>&nbsp;volts</Text>\r\n            </Box>\r\n            <Box>\r\n                <Stack fill anchor=\"center\">\r\n                    <Box fill align=\"center\">\r\n                        <Meter\r\n                            size=\"small\"\r\n                            type=\"circle\"\r\n                            background=\"dark-2\"\r\n                            values={[\r\n                                {\r\n                                    value: batteryPercentage,\r\n                                    color: \"accent-1\",\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </Box>\r\n                    <Box align=\"center\" direction=\"row\">\r\n                        <Text size=\"xxlarge\" weight=\"bold\">\r\n                            {Math.round(batteryPercentage, 0)}\r\n                        </Text>\r\n                        <Text>%</Text>\r\n                    </Box>\r\n                </Stack>\r\n            </Box>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default LatestData;\r\n","import React, { useContext } from \"react\";\r\nimport appContext from \"../context/appContext\";\r\n\r\nimport {\r\n    Area,\r\n    ComposedChart,\r\n    Line,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    ResponsiveContainer,\r\n} from \"recharts\";\r\nimport moment from \"moment\";\r\nimport { Box } from \"grommet\";\r\n\r\nfunction PowerCharts() {\r\n    const { powerData, chartMetric, chartTimeSpan } = useContext(appContext);\r\n    if (!powerData) return null;\r\n\r\n    return (\r\n        <Box fill>\r\n            <ResponsiveContainer>\r\n                <ComposedChart\r\n                    data={powerData.graphData}\r\n                    margin={{\r\n                        top: 5,\r\n                        right: 30,\r\n                        left: 20,\r\n                        bottom: 5,\r\n                    }}\r\n                >\r\n                    <CartesianGrid stroke='rgba(120,120,120,0.2)'  />\r\n                    <XAxis\r\n                        dataKey=\"time\"\r\n                        scale=\"time\"\r\n                        type=\"number\"\r\n                        domain={[\"auto\", \"auto\"]}\r\n                        allowDataOverflow\r\n                        tickFormatter={(timestamp) =>\r\n                            moment(timestamp).format(\r\n                                chartTimeSpan < 48 ? \"LT\" : \"MM/DD h:mm a\"\r\n                            )\r\n                        }\r\n                        style={{ fontSize: \"10px\", fill: \"rgb(200,200,200)\" }}\r\n                    />\r\n                    <YAxis\r\n                        width={30}\r\n                        type=\"number\"\r\n                        domain={\r\n                            chartMetric === \"amphours\"\r\n                                ? [0.2]\r\n                                : [\"dataMin\", \"dataMax\"]\r\n                        }\r\n                        style={{ fontSize: \"10px\", fill: \"rgb(200,200,200)\" }}\r\n                        ticks={\r\n                            chartMetric === \"amphours\"\r\n                                ? [0, 25, 50, 75, 100, 125, 150, 175, 200]\r\n                                : null\r\n                        }\r\n                    />\r\n                    {chartMetric === \"watts\" && [\r\n                        <Line\r\n                            key={chartMetric}\r\n                            type=\"linear\"\r\n                            dataKey={chartMetric}\r\n                            stroke=\"#6FFFB0\"\r\n                            strokeWidth={2}\r\n                            dot={false}\r\n                        />,\r\n                        <Line\r\n                            key={\"watts_min\"}\r\n                            type=\"linear\"\r\n                            dataKey={\"watts_min\"}\r\n                            stroke=\"rgba(111, 255, 176,0.5)\"\r\n\r\n                            strokeDasharray=\"5 5\"\r\n                            strokeWidth={1}\r\n                            dot={false}\r\n                        />,\r\n                        <Line\r\n                            key={\"watts_max\"}\r\n                            type=\"linear\"\r\n                            dataKey={\"watts_max\"}\r\n                            stroke=\"rgba(111, 255, 176,0.5)\"\r\n                            strokeDasharray=\"5 5\"\r\n                            strokeWidth={1}\r\n                            dot={false}\r\n                        />\r\n                    ]}\r\n                    {chartMetric === \"voltage\" && (\r\n                        <Line\r\n                            key={chartMetric}\r\n                            type=\"linear\"\r\n                            dataKey={chartMetric}\r\n                            stroke=\"#ff6fe7\"\r\n                            strokeWidth={2}\r\n                            dot={false}\r\n                        />\r\n                    )}\r\n                    {chartMetric === \"amphours\" && (\r\n                        <Area\r\n                            key={chartMetric}\r\n                            type=\"linear\"\r\n                            dataKey={chartMetric}\r\n                            stroke=\"#6fafff\"\r\n                        />\r\n                    )}\r\n                </ComposedChart>\r\n            </ResponsiveContainer>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default PowerCharts;\r\n","import React, { useContext } from \"react\";\r\nimport appContext from \"../context/appContext\";\r\nimport Chart from \"./Chart\";\r\n\r\nimport {\r\n    Tab,\r\n    Tabs,\r\n} from \"grommet\";\r\n\r\nfunction Layout() {\r\n    const {\r\n        chartMetric,\r\n        setChartMetric,\r\n    } = useContext(appContext);\r\n    const tabs = [\"watts\", \"voltage\", \"amphours\"];\r\n\r\n    return (\r\n        <Tabs\r\n            flex\r\n            activeIndex={tabs.indexOf(chartMetric)}\r\n            onActive={(index) => setChartMetric(tabs[index])}\r\n            alignControls=\"center\"\r\n        >\r\n            <Tab title=\"Watts\">\r\n                <Chart />\r\n            </Tab>\r\n            <Tab title=\"Volts\">\r\n                <Chart />\r\n            </Tab>\r\n            <Tab title=\"Battery Capacity\">\r\n                <Chart />\r\n            </Tab>\r\n        </Tabs>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","import React, { useContext } from \"react\";\r\nimport appContext from \"../context/appContext\";\r\n\r\nimport { Box, RadioButtonGroup, Text } from \"grommet\";\r\n\r\n\r\n\r\nfunction TimeSpanSelector() {\r\n    const { chartTimeSpan, setChartTimeSpan, fetching } = useContext(appContext);\r\n    return (\r\n        <Box align=\"end\">\r\n            <RadioButtonGroup\r\n\r\n                name=\"radio\"\r\n                direction=\"row\"\r\n                gap=\"small\"\r\n                pad={{right:'medium'}}\r\n                options={[\r\n                    {\r\n                        disabled:fetching,\r\n                        value: 2,\r\n                        label: \"2 hours\",\r\n                    },\r\n                    {\r\n                        disabled:fetching,\r\n                        value: 6,\r\n                        label: \"6 hours\",\r\n                    },\r\n                    {\r\n                        disabled:fetching,\r\n                        value: 24,\r\n                        label: \"1 day\",\r\n                    },\r\n                    {\r\n                        disabled:fetching,\r\n                        value: 72,\r\n                        label: \"3 days\",\r\n                    },\r\n                    {\r\n                        disabled:fetching,\r\n                        value: 168,\r\n                        label: \"1 week\",\r\n                    },\r\n                    {\r\n                        disabled:fetching,\r\n                        value: 672,\r\n                        label: \"4 weeks\",\r\n                    },\r\n                ]}\r\n                value={chartTimeSpan}\r\n                onChange={(event) => {\r\n                    setChartTimeSpan(event.target.value);\r\n                }}\r\n            >\r\n                {(option, { checked, hover }) => {\r\n                    let background;\r\n                    if (checked) background = \"accent-1\";\r\n                    else if (hover && !fetching) background = \"dark-4\";\r\n                    else background = \"dark-2\";\r\n                    return (\r\n                        <Box background={background} pad=\"xsmall\">\r\n                            <Text size='xsmall'> {option.label}</Text>\r\n                        </Box>\r\n                    );\r\n                }}\r\n            </RadioButtonGroup>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default TimeSpanSelector;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport LatestData from \"./LatestData\";\r\nimport ChartTabs from \"./ChartTabs\";\r\nimport TimeSpanSelector from \"./TimeSpanSelector\";\r\nimport { Box, Grid } from \"grommet\";\r\n\r\nfunction Layout() {\r\n    const [isPortrait, set_isPortrait] = useState(window.innerHeight > window.innerWidth);\r\n\r\n    const handleWindowResize = () => {\r\n        set_isPortrait(window.innerHeight > window.innerWidth);\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", handleWindowResize);\r\n        return () => window.removeEventListener(\"resize\", handleWindowResize);\r\n    }, []);\r\n\r\n    const chartHeight = isPortrait ? \"3fr\" : \"6fr\";\r\n    console.debug(chartHeight)\r\n    return (\r\n        <Box fill background=\"dark-1\">\r\n            <Grid fill rows={[chartHeight, \"auto\", \"2fr\"]}>\r\n                <ChartTabs />\r\n                <TimeSpanSelector />\r\n                <LatestData isPortrait={isPortrait} />\r\n                <></>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\nimport AppProvider from \"./context/AppProvider\";\n\nimport { Grommet } from \"grommet\";\nimport { grommet } from \"grommet/themes\";\nimport { deepMerge } from \"grommet/utils\";\nimport Layout from \"./components/Layout\";\n\nimport \"./App.css\";\n\nconst customTheme = deepMerge(grommet, {\n    global: {\n        focus: {\n            border: {\n                color: 'transparent'\n            }\n        }\n    },\n    tab: {\n        color: \"rgb(140,140,140)\",\n        active: {\n            color: \"accent-1\",\n        },\n        border: {\n            side: \"bottom\",\n            color: 'rgb(140,140,140)',\n            active: {\n                color: 'control'\n            }\n        }\n    },\n});\n\nfunction App() {\n    return (\n        <AppProvider>\n            <Grommet full theme={customTheme}>\n                <Layout />\n            </Grommet>\n        </AppProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}